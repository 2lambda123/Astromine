plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_name + "-" + project.mod_version + "+" + project.version_meta
group = project.mod_group

spotless {
    encoding 'UTF-8'
    enforceCheck(false)

    java {
        licenseHeaderFile(file('HEADER'))
        removeUnusedImports()
        eclipse().configFile(file('spotless/formatter-settings.xml'))
    }
}

repositories {
    maven {
        name = "Onyx Studios"
        url = "https://maven.onyxstudios.dev"
    }
    maven {
        name = "Spinnery"
        url = "https://dl.bintray.com/spinnery/Spinnery"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "Jared"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "SonaType"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
}

minecraft {
    accessWidener = file("src/main/resources/astromine.accesswidener")
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${minecraft_version}"

    // Yarn
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${api_version}"

    // Cardinal-Components API
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-chunk:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-level:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-chunk:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-level:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:${cardinal_components_version}"

    // Shapes
    modImplementation "com.terraformersmc:shapes:${shapes_version}"
    include "com.terraformersmc:shapes:${shapes_version}"

    // Spinnery
    modImplementation "com.github.vini2003:spinnery:${spinnery_version}"
    include "com.github.vini2003:spinnery:${spinnery_version}"

    // Patchouli
    modImplementation "vazkii.patchouli:Patchouli_1.16-fabric:${patchouli_version}"
    include "vazkii.patchouli:Patchouli_1.16-fabric:${patchouli_version}"

    // ModMenu
    modImplementation "io.github.prospector:modmenu:${modmenu_version}"

    // AutoConfig
    modImplementation "me.sargunvohra.mcmods:autoconfig1u:${auto_config_version}"
    include "me.sargunvohra.mcmods:autoconfig1u:${auto_config_version}"

    // LBA
    modImplementation "alexiil.mc.lib:libblockattributes-core:${lba_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-items:${lba_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-fluids:${lba_version}"

    // Tech Reborn Energy
    modImplementation "teamreborn:energy:${tr_energy_version}"
    include "teamreborn:energy:${tr_energy_version}"

    // Cloth Config
    modImplementation("me.shedaniel.cloth:config-2:${cloth_config_version}")
    include("me.shedaniel.cloth:config-2:${cloth_config_version}")

    // RoughlyEnoughItems
    modImplementation("me.shedaniel:RoughlyEnoughItems:${rei_version}")

    // DataBreaker
    modRuntime("com.github.SuperCoder7979:databreaker:${databreaker_version}") {
        exclude(module: "fabric-loader")
    }

    // LibStructure
    modImplementation "com.github.Draylar:LibStructure:${libstructure_version}"
    include "com.github.Draylar:LibStructure:${libstructure_version}"

    // JOML
    compile "org.joml:joml:${joml_version}"

    // Magna
    modImplementation "com.github.Draylar:magna:${magna_version}"
    include "com.github.Draylar:magna:${magna_version}"
    
    // Tech Reborn
    modRuntime "TechReborn:TechReborn-1.16:${tech_reborn_version}"
    
    // Reborn Core
    modRuntime "RebornCore:RebornCore-1.16:${reborn_core_version}"
}

processResources {
    inputs.property "version", "${mod_version}"

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": "${mod_version}"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "${mod_group}",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${mod_group}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_name}.mixins.json"
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}
